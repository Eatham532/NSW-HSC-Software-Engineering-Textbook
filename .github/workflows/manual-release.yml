name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - none
      skip_indexnow:
        description: 'Skip IndexNow notification'
        required: false
        default: false
        type: boolean
      custom_version:
        description: 'Custom version (if bump=none)'
        required: false
        type: string

# Cancel in-progress runs when new release is triggered
concurrency:
  group: manual-release
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  manual-release:
    name: 📦 Manual Release
    runs-on: ubuntu-latest
    container:
      image: python:3.13

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for release notes
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Mark repository safe for git
        shell: bash
        run: |
          # Allow git operations inside the runner workspace
          git config --global --add safe.directory "${{ github.workspace }}"
          git config --global --add safe.directory "$(pwd)"
          echo "✅ Git safe directories configured"

      - name: 👤 Configure git user
        shell: bash
        run: |
          git config --global user.email "78714349+Eatham532@users.noreply.github.com"
          git config --global user.name "Eatham532"
          echo "✅ Git user configured as Eatham532"

      - name: 🔧 Setup Python environment
        shell: bash
        run: |
          set -euo pipefail
          python --version
          python -m pip install --upgrade pip setuptools wheel build

      - name: 📦 Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -e . || python -m pip install .

      - name: 🛠️ Install zip utility
        shell: bash
        run: |
          apt-get update && apt-get install -y zip

      - name: 📊 Get current version
        id: get_version
        shell: bash
        run: |
          current_version=$(python scripts/bump_version.py show)
          echo "current_version=${current_version}" >> $GITHUB_OUTPUT
          echo "📌 Current version: ${current_version}"

      - name: 🔼 Bump version
        id: bump_version
        shell: bash
        run: |
          bump_type="${{ github.event.inputs.version_bump }}"
          if [ "$bump_type" = "none" ]; then
            if [ -n "${{ github.event.inputs.custom_version }}" ]; then
              new_version="${{ github.event.inputs.custom_version }}"
              echo "📝 Using custom version: ${new_version}"
            else
              new_version="${{ steps.get_version.outputs.current_version }}"
              echo "📌 Using current version: ${new_version}"
            fi
          else
            # Bump the version
            version_change=$(python scripts/bump_version.py "$bump_type")
            new_version=$(echo "$version_change" | cut -d' ' -f3)
            echo "✅ Version bumped: ${version_change}"
          fi
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

      - name: 💾 Update version in pyproject.toml
        if: github.event.inputs.version_bump != 'none'
        shell: bash
        run: |
          python scripts/bump_version.py "${{ github.event.inputs.version_bump }}"

      - name: 📦 Build site
        env:
          KROKI_SERVER_URL: http://kroki:8000
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v mkdocs >/dev/null 2>&1; then
            echo "❌ ERROR: mkdocs not found on PATH"
            exit 1
          fi
          echo "📦 Building site..."
          mkdocs build --clean
          echo "✅ Build complete!"

      - name: 📦 Create site archive
        shell: bash
        run: |
          cd site
          zip -r ../site-build.zip .
          cd ..
          echo "✅ Site archive created"

      - name: 💾 Commit version bump
        if: github.event.inputs.version_bump != 'none'
        shell: bash
        run: |
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }} [skip deploy]"
          git push origin main
          echo "✅ Version committed and pushed"

      - name: 📝 Generate release notes
        id: release_notes
        shell: bash
        run: |
          # Get the previous tag (if exists)
          previous_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$previous_tag" ]; then
            echo "📝 First release - including all commits"
            commit_range="HEAD"
          else
            echo "📝 Generating release notes since ${previous_tag}"
            commit_range="${previous_tag}..HEAD"
          fi

          # Generate commit log
          echo "## 📋 Changes" > release_notes.md
          echo "" >> release_notes.md
          git log ${commit_range} --pretty=format:"- %s (%h)" --no-merges | grep -v "\[skip deploy\]" >> release_notes.md || true
          echo "" >> release_notes.md

          # Get contributors since last tag
          if [ -n "$previous_tag" ]; then
            contributors=$(git log ${commit_range} --format='%an' | sort -u | grep -v "github-actions\[bot\]" || true)
            if [ -n "$contributors" ]; then
              echo "" >> release_notes.md
              echo "## 👥 Contributors" >> release_notes.md
              echo "" >> release_notes.md
              echo "$contributors" | while read contributor; do
                echo "- $contributor" >> release_notes.md
              done
            fi
          fi

          echo "✅ Release notes generated"

      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          body_path: release_notes.md
          files: |
            site-build.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-indexnow-manual:
    name: 🔔 Notify Search Engines (Manual)
    runs-on: ubuntu-latest
    needs: manual-release
    if: success() && github.event.inputs.skip_indexnow != 'true'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 📦 Install requests library
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests

      - name: 🔔 Notify IndexNow of changes
        shell: bash
        run: |
          echo "🔔 Notifying search engines of changes..."
          python scripts/indexnow_notify.py
        continue-on-error: true
