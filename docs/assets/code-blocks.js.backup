/**
 * Code Blocks - Execution and IDE Integration
 * 
 * Features:
 * - Adds Run and Open in Editor buttons to code blocks
 * - Handles Pyodide loading for in-browser Python execution
 * - Displays console output below code blocks
 * - Integrates with the full multi-language IDE
 * - Supports Python, HTML/CSS/JS, and Shell/Terminal blocks
 */

(function() {
    'use strict';

    // Pyodide state management
    let pyodideInstance = null;
    let pyodideLoading = false;
    let pyodideLoadPromise = null;

    // Language capabilities
    const LANGUAGE_CAPABILITIES = {
        python: {
            executable: true,
            ideTab: 'python',
            runnable: true
        },
        html: {
            executable: false,
            ideTab: 'web',
            runnable: false,
            preview: true
        },
        css: {
            executable: false,
            ideTab: 'web',
            runnable: false,
            preview: true
        },
        javascript: {
            executable: false,
            ideTab: 'web',
            runnable: false,
            preview: true
        },
        js: {
            executable: false,
            ideTab: 'web',
            runnable: false,
            preview: true
        },
        bash: {
            executable: false,
            ideTab: 'terminal',
            runnable: false,
            readOnly: true
        },
        shell: {
            executable: false,
            ideTab: 'terminal',
            runnable: false,
            readOnly: true
        },
        powershell: {
            executable: false,
            ideTab: 'terminal',
            runnable: false,
            readOnly: true
        }
    };

    /**
     * Load Pyodide (Python in WebAssembly)
     * Uses lazy loading - only loads when first needed
     */
    async function loadPyodide() {
        if (pyodideInstance) {
            return pyodideInstance;
        }

        if (pyodideLoading) {
            return pyodideLoadPromise;
        }

        pyodideLoading = true;
        console.log('[CodeRunner] Loading Pyodide...');

        pyodideLoadPromise = (async () => {
            try {
                // Load Pyodide from CDN
                const script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js';
                document.head.appendChild(script);

                await new Promise((resolve, reject) => {
                    script.onload = resolve;
                    script.onerror = reject;
                });

                // Initialize Pyodide
                pyodideInstance = await loadPyodide({
                    indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.24.1/full/'
                });

                console.log('[CodeRunner] Pyodide loaded successfully');
                
                // Store in localStorage to indicate it's cached
                try {
                    localStorage.setItem('pyodide_loaded', 'true');
                } catch (e) {
                    console.warn('[CodeRunner] Could not access localStorage:', e);
                }

                return pyodideInstance;
            } catch (error) {
                console.error('[CodeRunner] Failed to load Pyodide:', error);
                pyodideLoading = false;
                pyodideLoadPromise = null;
                throw error;
            }
        })();

        return pyodideLoadPromise;
    }

    /**
     * Execute Python code using Pyodide
     */
    async function executePythonCode(code) {
        const pyodide = await loadPyodide();

        // Capture stdout and stderr
        let output = {
            stdout: [],
            stderr: [],
            error: null,
            result: null
        };

        try {
            // Redirect stdout/stderr
            await pyodide.runPythonAsync(`
import sys
from io import StringIO

_stdout = StringIO()
_stderr = StringIO()
sys.stdout = _stdout
sys.stderr = _stderr
            `);

            // Run the user's code
            const result = await pyodide.runPythonAsync(code);

            // Get captured output
            const stdout = await pyodide.runPythonAsync('_stdout.getvalue()');
            const stderr = await pyodide.runPythonAsync('_stderr.getvalue()');

            output.stdout = stdout ? stdout.split('\n').filter(line => line) : [];
            output.stderr = stderr ? stderr.split('\n').filter(line => line) : [];
            output.result = result;

            // Restore stdout/stderr
            await pyodide.runPythonAsync(`
sys.stdout = sys.__stdout__
sys.stderr = sys.__stderr__
            `);

        } catch (error) {
            output.error = error.message;
        }

        return output;
    }

    /**
     * Create output display element
     */
    function createOutputDisplay(codeBlock) {
        const outputId = `output-${Math.random().toString(36).substr(2, 9)}`;
        const outputDiv = document.createElement('div');
        outputDiv.className = 'code-output';
        outputDiv.id = outputId;
        outputDiv.innerHTML = `
            <div class="code-output-header">
                <span class="code-output-title">Console Output</span>
                <button class="code-output-clear" title="Clear output">Clear</button>
            </div>
            <div class="code-output-content"></div>
        `;

        // Insert after the code block's parent
        const container = codeBlock.closest('.highlight');
        container.parentNode.insertBefore(outputDiv, container.nextSibling);

        // Clear button handler
        const clearBtn = outputDiv.querySelector('.code-output-clear');
        clearBtn.addEventListener('click', () => {
            const content = outputDiv.querySelector('.code-output-content');
            content.innerHTML = '';
        });

        return outputDiv;
    }

    /**
     * Display execution output
     */
    function displayOutput(outputElement, output) {
        const content = outputElement.querySelector('.code-output-content');
        content.innerHTML = '';

        // Display stdout
        if (output.stdout && output.stdout.length > 0) {
            output.stdout.forEach(line => {
                const lineDiv = document.createElement('div');
                lineDiv.className = 'output-line output-stdout';
                lineDiv.textContent = line;
                content.appendChild(lineDiv);
            });
        }

        // Display stderr
        if (output.stderr && output.stderr.length > 0) {
            output.stderr.forEach(line => {
                const lineDiv = document.createElement('div');
                lineDiv.className = 'output-line output-stderr';
                lineDiv.textContent = line;
                content.appendChild(lineDiv);
            });
        }

        // Display result if it's not None
        if (output.result !== null && output.result !== undefined && String(output.result) !== 'undefined') {
            const resultDiv = document.createElement('div');
            resultDiv.className = 'output-line output-success';
            resultDiv.textContent = `â†’ ${output.result}`;
            content.appendChild(resultDiv);
        }

        // Display error
        if (output.error) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'output-line output-error';
            errorDiv.textContent = `Error: ${output.error}`;
            content.appendChild(errorDiv);
        }

        // Show info message if no output
        if (!output.stdout.length && !output.stderr.length && !output.error && !output.result) {
            const infoDiv = document.createElement('div');
            infoDiv.className = 'output-line output-info';
            infoDiv.textContent = 'Code executed successfully (no output)';
            content.appendChild(infoDiv);
        }
    }

    /**
     * Handle Run button click
     */
    async function handleRunCode(button, codeBlock, code) {
        const outputElement = codeBlock.outputDisplay || createOutputDisplay(codeBlock);
        codeBlock.outputDisplay = outputElement;

        // Show loading state
        button.classList.add('loading');
        button.disabled = true;

        // Clear previous output
        const content = outputElement.querySelector('.code-output-content');
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'output-line output-info';
        loadingDiv.textContent = pyodideInstance ? 'Running...' : 'Loading Python environment...';
        content.innerHTML = '';
        content.appendChild(loadingDiv);

        try {
            const output = await executePythonCode(code);
            displayOutput(outputElement, output);
        } catch (error) {
            content.innerHTML = '';
            const errorDiv = document.createElement('div');
            errorDiv.className = 'output-line output-error';
            errorDiv.textContent = `Failed to execute: ${error.message}`;
            content.appendChild(errorDiv);
        } finally {
            button.classList.remove('loading');
            button.disabled = false;
        }
    }

    /**
     * Handle Open in Editor button click
     */
    function handleOpenInEditor(code, fenceType) {
        // Store code in sessionStorage to pass to editor page
        const editorData = {
            code: code,
            type: fenceType,
            timestamp: Date.now()
        };
        
        try {
            sessionStorage.setItem('code_editor_import', JSON.stringify(editorData));
        } catch (e) {
            console.warn('[CodeRunner] Could not save to sessionStorage:', e);
        }

        // Open editor in new tab
        window.open('/Software-Engineering-HSC-Textbook/code-editor/', '_blank');
    }

    /**
     * Add action buttons to a code block
     */
    function addCodeButtons(codeBlock) {
        const container = codeBlock.closest('.highlight');
        if (!container) return;

        const fenceType = container.dataset.fenceType;
        if (!fenceType) return; // Not a custom Python fence

        const codeElement = codeBlock.querySelector('code');
        if (!codeElement) return;

        const code = codeElement.textContent;

        // Create action buttons container
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'code-actions';

        // Open in Editor button (for all types)
        const editorBtn = document.createElement('button');
        editorBtn.className = 'code-action-btn code-editor-btn';
        editorBtn.textContent = 'Open in Editor';
        editorBtn.title = 'Open this code in the full IDE';
        editorBtn.addEventListener('click', () => handleOpenInEditor(code, fenceType));
        actionsDiv.appendChild(editorBtn);

        // Run button (only for exec type)
        if (fenceType === 'exec') {
            const runBtn = document.createElement('button');
            runBtn.className = 'code-action-btn code-run-btn';
            runBtn.textContent = 'Run';
            runBtn.title = 'Execute this code';
            runBtn.addEventListener('click', () => handleRunCode(runBtn, codeBlock, code));
            actionsDiv.appendChild(runBtn);
        } else {
            // Add tooltip for template/error types
            const tooltipText = fenceType === 'template' 
                ? 'Template code - may not run as-is' 
                : 'Error example - for educational purposes';
            container.setAttribute('data-tooltip', tooltipText);
        }

        container.appendChild(actionsDiv);
    }

    /**
     * Initialize code blocks
     */
    function initCodeBlocks() {
        // Find all Python code blocks with custom fence types
        const codeBlocks = document.querySelectorAll('.python-exec pre, .python-template pre, .python-error pre');
        
        codeBlocks.forEach(codeBlock => {
            addCodeButtons(codeBlock);
        });

        console.log(`[CodeRunner] Initialized ${codeBlocks.length} code blocks`);
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initCodeBlocks);
    } else {
        initCodeBlocks();
    }

    // Re-initialize on navigation (for MkDocs instant loading)
    document.addEventListener('DOMContentLoaded', () => {
        const observer = new MutationObserver(() => {
            initCodeBlocks();
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    });

})();
